<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" styleName="warningWinBG" 
	creationComplete="init()" kerning="true" minWidth="285" minHeight="190">
<mx:Script>
	<![CDATA[
		import views.windows.functionWins.shop.ShopHelper;
		import views.windows.functionWins.turntable.Turntable;
		import roma.logic.CaesaryConfig;
		import views.BeginnerGuide;
		import roma.message.EvtDispacther;
		import roma.util.InputTextHelper;
		import mx.resources.ResourceManager;
		import mx.utils.StringUtil;
		import roma.util.FiltersUtil;
		import roma.logic.rule.ItemRule;
		import roma.logic.rule.GameRuleHelper;
		import roma.common.constants.FailsCode;
		import framework.game.BaseResponse;
		import roma.util.MultiLang;
		import mx.core.Application;
		import mx.managers.PopUpManager;
		import mx.controls.Alert;

		[Bindable]
		private var winTitle:String;
		
		[Bindable]
		private var submitTxt:String;

		[Bindable]
		private var cancelTxt:String;

		[Bindable]
		private var hasCanceltn:Boolean = false;
		
		private var callBackFunc:Function;
		
		private static var instance:SecondSubmitWin = new SecondSubmitWin();
		
		private var maskerSprite:Sprite = new Sprite;
		
		public static var IS_FROM_MYITEM:String="is.from.myitem";
		public static var IS_FROM_TURNNER:String="is.from.turnner";
		private var fromWhere:String="";

		private function init():void {
			PopUpManager.centerPopUp(this);
		}

		public static function show(winTitle:String,where:String="", callBackFunc:Function=null, okText:String="default",cancleText:String="default",parentDisplayObject:DisplayObject=null):void {
			instance.useParam(winTitle,callBackFunc,okText,cancleText,parentDisplayObject);
			instance.fromWhere=where;
			instance.judgeToSelect(where);
		}
		
		public static function close():void {
			PopUpManager.removePopUp(instance);
		}
		
		private function onClickHandle(ok:Boolean):void {
			this.removeEventListener(KeyboardEvent.KEY_DOWN,enterHandle);  
			if(!ok){
				switch(fromWhere){
					case SecondSubmitWin.IS_FROM_MYITEM:
						CaesaryConfig.instance.isClickToBuy=false;
					break;
					case SecondSubmitWin.IS_FROM_TURNNER:
						CaesaryConfig.instance.isClickToTurn=false;
					break;
					default:
				}
			}else{
				ShopHelper.instance.writeLocal();
			}
			PopUpManager.removePopUp(instance);

			if (this.callBackFunc!=null) {
				this.callBackFunc.apply(this , [ok]);
			}
		}
		
		private function judgeToSelect(where:String):void{
			switch(where){
				case SecondSubmitWin.IS_FROM_MYITEM:
					noMoreTip.selected=CaesaryConfig.instance.isClickToBuy;
				break;
				case SecondSubmitWin.IS_FROM_TURNNER:
					noMoreTip.selected=CaesaryConfig.instance.isClickToTurn;
				break;
				default:
					noMoreTip.selected=false;
			}
		}
		
		
		private function drawMaskRec(screen:Rectangle):void{
			this.graphics.beginFill(0x333333,.5);
			this.graphics.drawRect((-screen.width/2+MyAlert.instanceWidth),(-screen.height/2+MyAlert.instanceHeight),screen.width,screen.height);

		}
		
		private function checkBoxChange():void{
			switch(fromWhere){
				case SecondSubmitWin.IS_FROM_MYITEM:
					CaesaryConfig.instance.isClickToBuy=noMoreTip.selected;
				break;
				case SecondSubmitWin.IS_FROM_TURNNER:
					CaesaryConfig.instance.isClickToTurn=noMoreTip.selected;
				break;
				default:
			}
		}
		
		
		
		private function useParam(winTitle:String, callBackFunc:Function=null, okText:String="default",cancleText:String="default",parentDisplayObject:DisplayObject=null):void {
			this.addEventListener(KeyboardEvent.KEY_DOWN,enterHandle);    
			this.callBackFunc = callBackFunc;
			this.winTitle = InputTextHelper.takeOutSpace(winTitle);
			if ( okText == "default" ){
				this.submitTxt = MultiLang.msg("public.label.sure");
			} else {
				this.submitTxt = okText;
			}
			if (cancleText == "default" ){
				this.cancelTxt = MultiLang.msg("public.label.cancel");
			} else {
				this.cancelTxt = cancleText;
			} 
			
			this.hasCanceltn = (callBackFunc!=null) && (cancleText!=null);

			if (!this.isPopUp) {
				if (parentDisplayObject == null) {
					parentDisplayObject = Application.application as DisplayObject;
				}
				PopUpManager.addPopUp(this, parentDisplayObject ,true);
			} else {
				PopUpManager.bringToFront(this);
			}
			this.myContent.setFocus();
			PopUpManager.centerPopUp(this);			
		}
		
		//键盘enter响应
		private function enterHandle(evt:KeyboardEvent):void{
			 if(evt.keyCode == 13){
			 	onClickHandle(true);
			 } 
		}
	]]>
</mx:Script>
	<mx:Label top="13" left="4" right="4" textAlign="center" text="{MultiLang.msg('systemMsg.winTitle')}" styleName="titleLabel" filters="{[FiltersUtil.glowFilter]}"/>
	<mx:VBox verticalAlign="top" horizontalAlign="center" top="40" left="15" right="15" bottom="22" verticalGap="3"> 
		<mx:VBox height="100%" width="100%">
			<mx:Canvas width="100%" height="100%" styleName="subContentBG">
				<mx:Text text="{winTitle}" id="myContent"  textAlign="left" left="15" top="15" bottom="15" right="15"/>
			</mx:Canvas>
			
		</mx:VBox>
		<mx:CheckBox id="noMoreTip" label="{MultiLang.msg('public.label.noMoreTip')}" width="100%" click="checkBoxChange()" visible="false" includeInLayout="false"/>
		<mx:HBox width="100%" horizontalAlign="center" verticalAlign="middle">
			<mx:Button label="{submitTxt}" click="onClickHandle(true)"  styleName="subTitleButton" width="80" height="100%"/>
			<mx:Button label="{cancelTxt}"  click="onClickHandle(false)" styleName="subTitleButton" visible="{this.hasCanceltn}" includeInLayout="{this.hasCanceltn}" width="80" height="100%"/>
		</mx:HBox>
	</mx:VBox>
</mx:Canvas>
