<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="105" height="25" creationComplete="init()">
	<mx:Script>
		<![CDATA[
		
			public var inputValue:Number;
			public var onInputDataChange:Function;
			public var onValChange:Function;
			public var actionType:int;
			public var valueMin:int = 0;

			private var _maxValue:int;
			
			[Bindable]
			public var effectValue:int;
			
			private var timer:Timer=new Timer(200);
			
			private var isClickDown:Boolean=false;
			
			private var isupBtnClick:Boolean=false;
			
			private function init():void{
				this.setComponentFocus();
			}
			
			public function set intValue(value:int):void{
				this.valueTextInput.text = String(value);
				this.effectValue = value;
				this.setComponentFocus();
			}
			
			public function set maxValue(value:int):void{
				_maxValue = value;
			}
			
			public function get curValue():int{
				return this.effectValue;
			}
			
			private function onChangeHandle(event:Event):void{
				var num:int = int(this.valueTextInput.text);
  				
				if(num>=_maxValue){
					this.effectValue = _maxValue ;
					this.valueTextInput.text = String(_maxValue);
					if(this.onInputDataChange != null){
						this.onInputDataChange.apply(this,[this.effectValue]);
					}
					return;
				}else{
					this.effectValue = num;
					if(this.onInputDataChange != null){
						this.onInputDataChange.apply(this,[this.effectValue]);
					}
				}					
				  
				//用于调用多个参数
				if(this.onValChange !=null){
					this.onValChange.call(this,this.effectValue,actionType,this.inputValue);
				}
			}
			
			public function refresh():void{
				this.valueTextInput.text =String(this.valueMin);
				this.effectValue = this.valueMin;
				
				setComponentFocus();
				
				if(this.onInputDataChange != null){
					this.onInputDataChange.apply(this,[this.effectValue]);
				}
				if(this.onValChange !=null){
					this.onValChange.call(this,this.effectValue,actionType,this.inputValue);
				}

			}
			
			private function onClickHandle(event:MouseEvent):void{
				var targetValue:int=int(this.valueTextInput.text);
				if(Button(event.target).id == "upBtn"){
					this.isupBtnClick=true;
					targetValue++;
					if(targetValue<=_maxValue){
						this.effectValue=targetValue;
						this.valueTextInput.text = String(this.effectValue);
						
					}else{
						return;
					}
					if(this.onInputDataChange != null){
						this.onInputDataChange.apply(this,[this.effectValue]);
					}
				}else{
					targetValue--;
					this.isupBtnClick=false;
					if(targetValue>=0){
						this.effectValue=targetValue;
						this.valueTextInput.text = String(this.effectValue);
					}else{
						return;
					}
				
					if(this.onInputDataChange != null){
						this.onInputDataChange.apply(this,[this.effectValue]);
					}
				}
				
				//用于调用多个参数
				if(this.onValChange !=null){
					this.onValChange.call(this,this.effectValue,actionType,this.inputValue);
				}  
				this.isClickDown=true;
				this.timer.start();
				this.timer.addEventListener(TimerEvent.TIMER,keepOnCount);
			}
			
			private function keepOnCount(event:TimerEvent):void{
				var targetValue:int=int(this.valueTextInput.text);
				if(this.isupBtnClick&&this.isClickDown){
					targetValue++;
					if(targetValue<=_maxValue){
						this.effectValue=targetValue;
						this.valueTextInput.text = String(this.effectValue);
						
					}else{
						return;
					}
					if(this.onInputDataChange != null){
						this.onInputDataChange.apply(this,[this.effectValue]);
					}
				}else if(!this.isupBtnClick&&this.isClickDown){
					targetValue--;
					this.isupBtnClick=false;
					if(targetValue>=0){
						this.effectValue=targetValue;
						this.valueTextInput.text = String(this.effectValue);
					}else{
						return;
					}
				
					if(this.onInputDataChange != null){
						this.onInputDataChange.apply(this,[this.effectValue]);
					}
				}
			}
			
			private function setComponentFocus():void{
				if(this.initialized){
					if(valueTextInput.text.length>0){
						valueTextInput.setSelection(0,valueTextInput.text.length);
						valueTextInput.setFocus();
					}
				}
			}
			
			private function onFocusIn(event:Event):void{
				var ti:TextInput = TextInput(event.currentTarget);
				ti.setSelection(0,ti.text.length);
			}
			
			public function reSize(w:int):void{
				this.width=w;
				this.valueTextInput.width=w-24;
			}
			
			private function mouseUpHandle(event:MouseEvent):void{
				this.isClickDown=false;
				this.timer.stop();
				this.timer.removeEventListener(TimerEvent.TIMER,keepOnCount);
			}
		]]>
	</mx:Script>
	<mx:HBox width="100%" height="100%" horizontalCenter="0" verticalCenter="0" horizontalGap="0" horizontalAlign="center" verticalAlign="middle">
		<mx:TextInput id ="valueTextInput" width="81" height="20" restrict="0-9" maxChars="3" change="onChangeHandle(event)" fontWeight="normal" text="{this.effectValue}"  focusIn="onFocusIn(event)" paddingTop="1" textAlign="center"/>
		<mx:VBox height="100%" verticalGap="0" verticalAlign="middle" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Button id = "upBtn" width="20" height="10" mouseDown="onClickHandle(event)" styleName="NumericStepperUpBtn" focusEnabled="false" mouseUp="mouseUpHandle(event)"/>
			<mx:Button id = "downBtn" width="20" height="10" mouseDown="onClickHandle(event)" styleName="NumericStepperDownBtn" focusEnabled="false" mouseUp="mouseUpHandle(event)"/>
		</mx:VBox>
	</mx:HBox>
</mx:Canvas>
