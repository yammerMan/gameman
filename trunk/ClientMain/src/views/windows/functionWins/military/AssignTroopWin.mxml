<?xml version="1.0" encoding="utf-8"?>
<BaseFunctionWindow
	creationComplete="init()"
	cacheAsBitmap="true"
	width="820" height="384"
	title="{MultiLang.msg('military.assginTroop.title')}" 
	xmlns="views.windows.functionWins.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:military="views.windows.functionWins.military.*">
	<mx:Script>
		<![CDATA[
			import views.windows.functionWins.hero.HeroHelper;
			import views.windows.functionWins.hero.HerosMansionWin;
			import roma.data.MapTileData;
			import views.PopupWindows;
			import views.mainModules.map.MapFieldInfoWin;
			import views.mainModules.map.diamond2.DiamondWorldMap2;
			import roma.common.action.ControllerFactory;
			import views.spreadUI.MyAlert;
			import roma.common.controller.CommonResponse;
			import views.windows.BaseWin;
			import mx.containers.Canvas;
			import roma.util.PopupWinManager;
			import roma.message.EvtDispacther;
			import roma.message.events.MsgEvent;
			import roma.logic.object.castle.CastleObj;
			import roma.logic.GameContext;
			import roma.logic.CaesaryConfig;
			import mx.collections.ArrayCollection;
			import roma.logic.object.hero.HeroObj;
			import roma.util.MultiLang;
			import flash.utils.getQualifiedClassName;
			import mx.logging.Log;
			import mx.logging.ILogger;
			
			public static const WINDOW_SHOW:String = "AssingTroopWin.show";
			
			
			private static var log:ILogger = Log.getLogger("views.windows.functionWins.military.AssingTroopWin");
			
			[Bindable]
			private var curHero:HeroObj;
			
			[Bindable]
			private var secHero:HeroObj;
			
			[Bindable]
			private var hasSecend:Boolean = false;
			
			[Bindable]
			private var secondHeroArray:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var isCanAssigeWithCastle:Boolean;
			
			[Bindable]
			private var selectedHeroName:String;
			
			[Bindable]
			private var heroSelectorVisable:Boolean = false;
			
			[Bindable]
			private var canGotoWar:Boolean;

			private var heroData:HeroData;
						
			private var helper:AssignHelper = AssignHelper.instance;
			
			private var secondUIary:Array = new Array();
			private var allUIAry:Array = new Array();
			
			
			/**
			 * 初始化
			 */
			private function init():void {
				EvtDispacther.instance.addEventListener(EvtDispacther.ASSIGN_TROOP_DROP, onAssignDrop);

				this.initTroopUi();
				this.setChildIndex(this.heroContainer,this.getChildren().length-1);
			}
			
			private function initTroopUi():void{
				//底部兵种ui
				var ary:Array = helper.troopInCastleArray;
				for(var i:int =0;i<ary.length;i++){
					var ui:TroopInCastle = ary[i] as TroopInCastle;
					ui.x =CoorConstant.COOR1_X+i*CoorConstant.UI_WIDTH;
					ui.y = CoorConstant.COOR1_Y;
					
					this.allUIAry.push(ui);
					this.addChild(ui);
				}
				
				//左边兵种ui
				var ary1:Array = helper.firstArray;
				for(var j:int =0;j<ary.length;j++){
					var ui1:TroopInHero = ary1[j] as TroopInHero;
					ui1.x = CoorConstant.COOR2_X+j*CoorConstant.UI_WIDTH;
					ui1.y = CoorConstant.COOR2_Y;
					ui1.setSoldierinitTpye(j);
					if(j>=3){
						ui1.x=CoorConstant.COOR2_X+(j-3)*CoorConstant.UI_WIDTH;
						ui1.y =CoorConstant.COOR2_Y+ CoorConstant.UI_HEIGHT;
					}
					
					this.allUIAry.push(ui1);
					this.addChild(ui1);
				}
				
				//右边兵种ui
				var ary2:Array = helper.secondArray;
				for(var k:int =0;k<ary2.length;k++){
					var ui2:TroopInHero = ary2[k] as TroopInHero;
					ui2.x = CoorConstant.COOR3_X+k*CoorConstant.UI_WIDTH;
					ui2.y = CoorConstant.COOR3_Y;
					ui2.setSoldierinitTpye(k);	
					if(k>=3){
						ui2.x =CoorConstant.COOR3_X+(k-3)*CoorConstant.UI_WIDTH;	
						ui2.y = CoorConstant.COOR3_Y+CoorConstant.UI_HEIGHT;	
					} 
					
					if(!hasSecend){
						ui2.visible = false;
					}

					this.allUIAry.push(ui2);
					this.secondUIary.push(ui2);
					this.addChild(ui2);
				}
				
				//拖动框
				var ary3:Array = helper.dragUIAry;
				for(var d:int;d<ary3.length;d++){
					var dragUI:DragUIComponent = ary3[d] as DragUIComponent;
					dragUI.setTroopAttssign(BaseTroopAtAssign(allUIAry[d]));
					this.addChild(dragUI);				
				}
			}
			
			/**
			 * 拖动完成时
			 */
			private function onAssignDrop(event:MsgEvent):void {
				var win:BaseWin = BaseWin(event.data);
				win.onShowUpdate();
				PopupWinManager.instance.addPopup(win , true, this);
			}

			override public function refresh():void {
				this.hasSecend = false;
				this.helper.hasSecond = false;
				this.heroSelectorVisable=false;
//				var castle:CastleObj = GameContext.instance.getPlayerObj().getCurCastleObj();
				
				log.debug("winData={0}", this.winData);
				this.heroData = this.winData as HeroData;

				this.curHero = this.heroData.heroObj;
				var castle:CastleObj = this.curHero.castleObj;
				
				this.isCanAssigeWithCastle = curHero.isInCastle;
				
				this.helper.reset(this.curHero);
				
				this.curArmyInAssign.setCurHero(this.curHero);
				this.castleTroopInAssign.curSelectedCastle=this.curHero.castleObj;
				
				var ac:ArrayCollection = castle.heroManager.heroArray;
				this.secondHeroArray.removeAll();
				
				for(var i:int = 0;i<secondUIary.length;i++){
					TroopInHero(secondUIary[i]).visible = false;
				}
				
				var findOld:Boolean = false;
				for each(var hero:HeroObj in ac) {
					if (hero.isCanSwapTroopWithOther(this.curHero)) {
						this.secondHeroArray.addItem(hero);
						
						if (this.secHero!=null && this.secHero.heroInfo.id == hero.heroInfo.id) {
							findOld = true;
						}
					}
				}
				if (this.secondHeroArray.length>0) {
					if (findOld) {
						this.onHeroSelected(this.secHero);
					} else {
						this.onHeroSelected(HeroObj(this.secondHeroArray[0]));
					}
				} else {
					this.selectedHeroName = "";
					this.secHero = null;
					this.targetArmyInAssign.setCurHero(null);
				}
				
				if(!heroData.isFromHero){
					this.canGotoWar = true;
				}else{
					if(GameContext.instance.getPlayerObj().favoriteManager.filterArray.length>0){
						this.canGotoWar	=true;				
					}else{
						this.canGotoWar = false;
					}
				}
				if(curHero != null)
				this.curHero.updateHeroObj();
				if(secHero != null)
				this.secHero.updateHeroObj();
			}
			
			/**
			 * 选择了第二个英雄
			 */
			public function onHeroSelected(hero:HeroObj):void {
				this.hasSecend = true;
				this.helper.hasSecond = true;
				if (this.secHero!=null) {
					this.secHero.selectedInUi = false;
				}
				
				this.secHero = hero;
				this.secHero.selectedInUi = true;
				this.helper.setSecondHero(hero);
				this.selectedHeroName = hero.heroInfo.name;
				this.heroSelectorVisable = false;
				this.targetArmyInAssign.setCurHero(hero);
				this.heroSelectBtn.setStyle("color",this.secHero.heroInfo.potentiality>0?0x0082cd:0x81511c);
				for(var i:int = 0;i<secondUIary.length;i++){
					TroopInHero(secondUIary[i]).visible = true;
				}
			}
			
			private function onSelectHeroBtnClick():void {
				var old:Boolean = this.heroSelectorVisable;
				if (old) {
					this.heroSelectorVisable = false;
				} else {
					this.curHero = this.heroData.heroObj;
					if(this.curHero==null)return;
					var castle:CastleObj = this.curHero.castleObj;
					var ac:ArrayCollection = castle.heroManager.heroArray;
					this.secondHeroArray.removeAll();							
					for each(var hero:HeroObj in ac) {
						if (hero.isCanSwapTroopWithOther(this.curHero)) {
							this.secondHeroArray.addItem(hero);
						}
					}
					this.heroSelectorVisable = true;
					this.curHero.updateHeroObj();
				}
			}
			
			/** 交换英雄部队 ,交换钱需要判断英雄统帅力*/
			private function swapTroop():void{
				var swapTroopResponse:Function = function(event:CommonResponse):void{
					if(!event.isSuccess()){
						MyAlert.showError(event);
					}
				}
				
				//当前英雄统帅力不够
				if(this.curHero.leadership<this.secHero.armyManager.calcTroopStrength()){
 					MyAlert.show(MultiLang.msg("military.don't.swap",curHero.heroInfo.name));
					return;
				}
				
				//第二英雄统帅力不够
				if(this.secHero.leadership<this.curHero.armyManager.calcTroopStrength()){
 					MyAlert.show(MultiLang.msg("military.don't.swap",secHero.heroInfo.name));
					return;
				}
				
				ControllerFactory.getInstance().getArmyController().changeHeroTroop(this.curHero.castleObj.cityId,this.curHero.heroInfo.id,this.secHero.heroInfo.id,swapTroopResponse);			
			}
			
			private function createArmy():void{
				if(this.heroData.isFromHero){
					GoToWarFromFavorite.getInstance().goToWar();
				}else{
					var d:MapTileData = GoingToWarWin.instance.winData as MapTileData;
					//PopupWindows.openFuncWin(GoingToWarWin.WINDOW_SHOW,d);
					HeroHelper.instance.targetMapTileData=d;
					PopupWindows.openFuncWin(HerosMansionWin.WINDOW_SHOW_CAMPAIGN);
				}
			} 
		]]>
	</mx:Script>
	<mx:Canvas x="12" y="32" width="227" height="341" label="帮助说明" styleName="subContentBG">
		<mx:TextArea htmlText="{MultiLang.msg('military.assginTroop.tip')}" left="24" top="23" right="24" bottom="50" editable="false" leading="9" styleName="discritionTextArea"/>
		<mx:Button label="{MultiLang.msg('military.newArmy.title')}" horizontalCenter="0" bottom="15" width="150"  enabled="{this.canGotoWar}" click="createArmy()" toolTip="{MultiLang.msg('assignTroopWin.goToNewArmyWinTip')}"/>
	</mx:Canvas>

	<mx:Canvas x="242" y="32" width="260" height="260" label="英雄资料" styleName="subContentBG">
		<military:ArmyInAssign  id="curArmyInAssign"/>
	</mx:Canvas>
	
	<mx:Canvas x="548" y="32" width="260" height="260" label="英雄资料" styleName="subContentBG">
		<military:ArmyInAssign id="targetArmyInAssign"
			visible="{this.hasSecend}"/>
	</mx:Canvas>
	
	
	<military:CastleTroopInAssign id="castleTroopInAssign" label="城堡中部队" 
		x="242" y="294"  
		styleName="subContentBG"/>
	<mx:Button x="505" y="158" width="38" height="37" styleName="interchangeBtn" toolTip="{MultiLang.msg('hero.buttonTip.armyExchange')}" click="swapTroop()"  enabled="{this.hasSecend}"/>
	
	<mx:Button styleName="comboBoxBtn" x="672" width="117" height="22"
		label="{this.selectedHeroName}" 
		click="this.onSelectHeroBtnClick()"
		enabled="{this.secondHeroArray.length>0}" top="47" id="heroSelectBtn"/>
	<mx:Canvas width="340" height="274" right="32" y="77" label="英雄选择" styleName="baseTooltip" id="heroContainer"
		visible="{this.heroSelectorVisable}">
		<mx:DataGrid dataProvider="{this.secondHeroArray}" headerHeight="0" backgroundAlpha="0"
			rowHeight="52" left="7" top="7" right="5" bottom="7" borderStyle="none">
			<mx:columns>
				<mx:DataGridColumn>
					<mx:itemRenderer>
						<mx:Component>
							<military:HeroSelectorItem
								hero="{HeroObj(data)}"
								click="{outerDocument.onHeroSelected(HeroObj(data))}">
								<mx:Script>
									<![CDATA[
										import roma.logic.object.hero.HeroObj;
									]]>
								</mx:Script>
							</military:HeroSelectorItem>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
	<mx:Label text="{curHero.heroInfo.name}" top="47" left="367" styleName="titleBordLabel" color="{curHero.heroInfo.potentiality>0?0x0082cd:0x81511c}" textAlign="center" width="125"/>

</BaseFunctionWindow>
