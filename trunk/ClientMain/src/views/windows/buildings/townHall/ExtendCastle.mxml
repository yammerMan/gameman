<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
	xmlns:ui="view.ui.*" xmlns:spreadUI="views.spreadUI.*" creationComplete="init()">
	
	<mx:Script>
		<![CDATA[
			import roma.message.EvtDispacther;
			import views.spreadUI.speedUp.ItemWin;
			import roma.util.ClientUtil;
			import roma.common.constants.BuildingConstant;
			import roma.logic.rule.GameRuleHelper;
			import roma.logic.rule.ItemRule;
			import roma.common.constants.InteriorConstant;
			import roma.logic.GameContext;
			import roma.common.valueObject.MaterialBean;
			import mx.controls.Alert;
			import roma.logic.rule.ruleCheck.ResourceCheck;
			import views.spreadUI.MyAlert;
			import roma.logic.object.building.impl.TownHall;
			import roma.logic.object.castle.CastleLevelConditon;
			import roma.logic.object.castle.ResourceConditon;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import roma.util.MultiLang;
			import roma.resource.ImgManager;
			
			private static var log:ILogger = Log.getLogger("views.windows.buildings.townHall.ExtendCastle");
			private var myTimer:Timer = new Timer(200);
			
			[Bindable]
			private var  extendDesc:String;
			[Bindable]
			private var curLevelDesc:String;
			[Bindable]
			private var maxLevelDesc:String;
			[Bindable]
			private var btnEnabled:Boolean;
			[Bindable]
			private var conditionStr:String;
						
			public var buildingObj:TownHall;
			
			private var golds:ResourceCheck;
			private var food:ResourceCheck ;
			private var wood:ResourceCheck ;
			private var stone:ResourceCheck ;
			private var iron:ResourceCheck ;
			private var itemRule:ItemRule;
			
			private function init():void{
				this.myTimer.addEventListener(TimerEvent.TIMER,timerHandler);
				this.timerStart();
				this.refresh();
			}
			
			public function refresh():void{
				if(this.initialized){
					if(this.buildingObj.castle.level>=3){
						this.extendDesc ="<b><font color='#370d00'>"+MultiLang.msg('castle.current.maxLevel')+"</font></b>";
					}else{
						this.extendDesc ="<b><font color='#370d00'>"+MultiLang.msg('castle.extend')+"</font></b><br/>"+MultiLang.msg('castle.extend.desc',this.buildingObj.castle.level+2,this.countLv(this.buildingObj.castle.level+1));
					}
					this.curLevelDesc = "<b><font color='#370d00'>"+MultiLang.msg('public.curLevel')+"</font></b><br/>"+MultiLang.msg('castle.curLevel.desc',this.buildingObj.castle.level+1,this.countSpace(),this.countLv(this.buildingObj.castle.level));
					this.maxLevelDesc= "<b><font color='#370d00'>"+MultiLang.msg('public.maxLevel')+"</font></b><br/>"+MultiLang.msg('castle.maxLevel.desc');
					
					CastleLevelConditon.instance.updateCurCastleResCondition();
					this.getResource();
					this.conditionForm.resourceCondition = CastleLevelConditon.instance;
					
					if(this.buildingObj.castle.level==3){
						this.btnEnabled = false;
					}else{
						this.btnEnabled = true;
					}
					this.timerStart();
				}
			}
			
			/* 根据城的级别计算空地 */
			private function countSpace():int{
				with(this.buildingObj.castle){
					if(level==0){
						return BuildingConstant.INIT_BUILDING_LIMIT;
					}else if(level==1){
						return BuildingConstant.FIRST_BUILDING_LIMIT;
					}else if(level==2){
						return BuildingConstant.SECOND_BUILDING_LIMIT;
					}else{
						return BuildingConstant.THIRD_BUILDING_LIMIT;
					}
				}
			}
			
			/* 根据城的级别计算可建筑等级 */
			private function countLv(level:int):int{
				if(level==0){
					return InteriorConstant.FIRST_EXPAND_TOWNHALL_LEVEL_DEPEND;
				}else if(level==1){
					return InteriorConstant.SECOND_EXPAND_TOWNHALL_LEVEL_DEPEND;
				}else if(level==2){
					return InteriorConstant.THIRD_EXPAND_TOWNHALL_LEVEL_DEPEND;
				}else{
					return InteriorConstant.THIRD_EXPAND_TOWNHALL_LEVEL_DEPEND;
				}
			}
			
			private function getResource():void{
				this.food  = CastleLevelConditon.instance.getFood();
				this.wood  = CastleLevelConditon.instance.getWoods();
				this.stone = CastleLevelConditon.instance.getStones();
				this.iron  = CastleLevelConditon.instance.getIrons();
				this.golds  = CastleLevelConditon.instance.getGolds();
			}
			
			private function checkExtendCastleCond():void{
				this.food.check();
				this.wood.check();
				this.stone.check();
				this.iron.check();
				this.golds.check();
				
				//判断官府级别				
				if(!CastleLevelConditon.instance.checkExtendCastleLevel()){
					return;
				}
				//判断粮食
				if(!this.food.isMatch){
					MyAlert.show(MultiLang.msg('public.food.lack'));
					return;
				}
				//判断木材
				if(!this.wood.isMatch){
					MyAlert.show(MultiLang.msg('public.wood.lack'));
					return;
				}
				//判断石头
				if(!this.stone.isMatch){
					MyAlert.show(MultiLang.msg('public.stone.lack'));
					return;
				}
				//判断铁块
				if(!this.iron.isMatch){
					MyAlert.show(MultiLang.msg('public.iron.lack'));
					return;
				}
				//判断黄金
				if(!this.golds.isMatch){
					MyAlert.show(MultiLang.msg('public.gold.lack'));
					return;
				}
				
				this.itemRule = GameRuleHelper.instance.getItemRuleById(InteriorConstant.EXPAND_CASTLE_ITEM);
				if(this.itemRule !=null){
					MyAlert.show(MultiLang.msg("castle.extend.isSure",CastleLevelConditon.instance.resourceCodition.castleLevel+1,this.itemRule.name,CastleLevelConditon.instance.resourceCodition.needItemNum),extendCastle);
				}
			}
			
			private function extendCastle(_true:Boolean):void{
				if(_true){
					var bean:MaterialBean =GameContext.instance.getPlayerObj().itemManager.getMaterialBeanById(InteriorConstant.EXPAND_CASTLE_ITEM);	
					if(bean ==null || bean.count<CastleLevelConditon.instance.resourceCodition.needItemNum ){
						MyAlert.show(MultiLang.msg('public.item.not.enough',this.itemRule.name),buyItemAndUseItem);						
					}else{
						this.buildingObj.extendCastle(onExtendCastle);
					}
				}
			}
			
			private function buyItemAndUseItem(_true:Boolean):void{
				if(_true){
                    var b:Boolean = GameContext.instance.getPlayerObj().itemManager.ifEnoughGold(InteriorConstant.EXPAND_CASTLE_ITEM,CastleLevelConditon.instance.resourceCodition.needItemNum);
					if(b){
						this.buildingObj.extendCastle(onExtendCastle);
					}else{
						MyAlert.show(MultiLang.msg('public.coin.lack'),recharge,MultiLang.msg('systemMsg.getGold'));
					}					
				}
			}
			
			private function recharge(_true:Boolean):void{
				if(_true){
					ClientMain.recharge();
				}
			}
			
			private function onExtendCastle():void{
				this.refresh();
				if(this.buildingObj.castle.level>2){
					EvtDispacther.sendEvent(EvtDispacther.EXTEND_SUCCESS);
				}
			}
			
			private function timerHandler(event:TimerEvent):void{
				if(this.buildingObj.castle.level+1<=3){
					this.conditionStr = CastleLevelConditon.instance.checkExtendCondition();
				}else{
					this.myTimer.stop();
					this.conditionStr ="";
				}
			}
			
			public function timerStart():void{
				if(!this.myTimer.running)
					this.myTimer.start();
			}

			public function destroy():void{
				this.myTimer.stop();
			}
		]]>
	</mx:Script>
	
	<mx:Canvas styleName="buildingInfoContentBG" left="285" top="3" right="1" bottom="37">
		<mx:Label text="{MultiLang.msg('townHall.enlargeEnlarge')}:" styleName="titleBordLabel" left="87" top="40"/>
		<mx:VBox left="87" top="60" verticalGap="0">
			<mx:HRule width="100%"/>
			<mx:HBox width="100%" height="24" horizontalGap="0" styleName="whriteBG">
				<mx:VRule height="100%"/>
				<mx:Text width="100%" height="100%" selectable="false" htmlText="{this.conditionStr}" textAlign="center"/>
				<mx:VRule height="100%"/>
			</mx:HBox>
			<spreadUI:ConditionForm labelWidth="98" lineWidth="285" txtAlign="{TextFormatAlign.CENTER}" id="conditionForm" timeStr="{MultiLang.msg('immediately.complete')}" width="285"/>
		</mx:VBox>
		<mx:Button width="120" horizontalCenter="0" label="{MultiLang.msg('castle.extend')}" click="checkExtendCastleCond()" enabled="{this.btnEnabled}" bottom="27"/>
	</mx:Canvas>
	
	<mx:Canvas left="0" top="3" styleName="subContentBG" width="284" bottom="37">
		<mx:VBox left="24" top="23" verticalGap="10" right="24" bottom="10">
			<mx:Text htmlText="{this.extendDesc}" width="100%" selectable="false"/>
			<mx:Text htmlText="{this.curLevelDesc}" width="100%" selectable="false"/>
			<mx:Text htmlText="{this.maxLevelDesc}" width="100%" selectable="false"/>
		</mx:VBox>
	</mx:Canvas>
</mx:Canvas>
